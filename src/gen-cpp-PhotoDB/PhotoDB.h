/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef PhotoDB_H
#define PhotoDB_H

#include <thrift/TDispatchProcessor.h>
#include "photodb_types.h"

namespace photodb {

class PhotoDBIf {
 public:
  virtual ~PhotoDBIf() {}
  virtual int32_t ping() = 0;
  virtual void getMeta( ::photodb::MetaValueResult& _return, const  ::photodb::Key key) = 0;
  virtual void getImg( ::photodb::ImgValueResult& _return, const  ::photodb::Key key, const int32_t width) = 0;
  virtual int64_t putMeta(const  ::photodb::Key key, const  ::photodb::MetaValue& value) = 0;
  virtual int64_t putImg(const  ::photodb::Key key, const  ::photodb::ImgValue& value) = 0;
  virtual int32_t exist(const  ::photodb::Key key) = 0;
  virtual int64_t remove(const  ::photodb::Key key) = 0;
  virtual void ow_putMeta(const  ::photodb::Key key, const  ::photodb::MetaValue& value) = 0;
  virtual void ow_putImg(const  ::photodb::Key key, const  ::photodb::ImgValue& value) = 0;
  virtual void ow_remove(const  ::photodb::Key key) = 0;
};

class PhotoDBIfFactory {
 public:
  typedef PhotoDBIf Handler;

  virtual ~PhotoDBIfFactory() {}

  virtual PhotoDBIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(PhotoDBIf* /* handler */) = 0;
};

class PhotoDBIfSingletonFactory : virtual public PhotoDBIfFactory {
 public:
  PhotoDBIfSingletonFactory(const boost::shared_ptr<PhotoDBIf>& iface) : iface_(iface) {}
  virtual ~PhotoDBIfSingletonFactory() {}

  virtual PhotoDBIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(PhotoDBIf* /* handler */) {}

 protected:
  boost::shared_ptr<PhotoDBIf> iface_;
};

class PhotoDBNull : virtual public PhotoDBIf {
 public:
  virtual ~PhotoDBNull() {}
  int32_t ping() {
    int32_t _return = 0;
    return _return;
  }
  void getMeta( ::photodb::MetaValueResult& /* _return */, const  ::photodb::Key /* key */) {
    return;
  }
  void getImg( ::photodb::ImgValueResult& /* _return */, const  ::photodb::Key /* key */, const int32_t /* width */) {
    return;
  }
  int64_t putMeta(const  ::photodb::Key /* key */, const  ::photodb::MetaValue& /* value */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t putImg(const  ::photodb::Key /* key */, const  ::photodb::ImgValue& /* value */) {
    int64_t _return = 0;
    return _return;
  }
  int32_t exist(const  ::photodb::Key /* key */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t remove(const  ::photodb::Key /* key */) {
    int64_t _return = 0;
    return _return;
  }
  void ow_putMeta(const  ::photodb::Key /* key */, const  ::photodb::MetaValue& /* value */) {
    return;
  }
  void ow_putImg(const  ::photodb::Key /* key */, const  ::photodb::ImgValue& /* value */) {
    return;
  }
  void ow_remove(const  ::photodb::Key /* key */) {
    return;
  }
};


class PhotoDB_ping_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  PhotoDB_ping_args(const PhotoDB_ping_args&);
  PhotoDB_ping_args& operator=(const PhotoDB_ping_args&);
  PhotoDB_ping_args() {
  }

  virtual ~PhotoDB_ping_args() throw();

  bool operator == (const PhotoDB_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const PhotoDB_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_ping_args& obj);
};


class PhotoDB_ping_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~PhotoDB_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_ping_pargs& obj);
};

typedef struct _PhotoDB_ping_result__isset {
  _PhotoDB_ping_result__isset() : success(false) {}
  bool success :1;
} _PhotoDB_ping_result__isset;

class PhotoDB_ping_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  PhotoDB_ping_result(const PhotoDB_ping_result&);
  PhotoDB_ping_result& operator=(const PhotoDB_ping_result&);
  PhotoDB_ping_result() : success(0) {
  }

  virtual ~PhotoDB_ping_result() throw();
  int32_t success;

  _PhotoDB_ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const PhotoDB_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_ping_result& obj);
};

typedef struct _PhotoDB_ping_presult__isset {
  _PhotoDB_ping_presult__isset() : success(false) {}
  bool success :1;
} _PhotoDB_ping_presult__isset;

class PhotoDB_ping_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~PhotoDB_ping_presult() throw();
  int32_t* success;

  _PhotoDB_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_ping_presult& obj);
};


class PhotoDB_getMeta_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  PhotoDB_getMeta_args(const PhotoDB_getMeta_args&);
  PhotoDB_getMeta_args& operator=(const PhotoDB_getMeta_args&);
  PhotoDB_getMeta_args() : key(0) {
  }

  virtual ~PhotoDB_getMeta_args() throw();
   ::photodb::Key key;

  void __set_key(const  ::photodb::Key val);

  bool operator == (const PhotoDB_getMeta_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_getMeta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_getMeta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_getMeta_args& obj);
};


class PhotoDB_getMeta_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~PhotoDB_getMeta_pargs() throw();
  const  ::photodb::Key* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_getMeta_pargs& obj);
};

typedef struct _PhotoDB_getMeta_result__isset {
  _PhotoDB_getMeta_result__isset() : success(false) {}
  bool success :1;
} _PhotoDB_getMeta_result__isset;

class PhotoDB_getMeta_result {
 public:

  static const char* ascii_fingerprint; // = "504923E6FB2E58930D36738C9888DC60";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x49,0x23,0xE6,0xFB,0x2E,0x58,0x93,0x0D,0x36,0x73,0x8C,0x98,0x88,0xDC,0x60};

  PhotoDB_getMeta_result(const PhotoDB_getMeta_result&);
  PhotoDB_getMeta_result& operator=(const PhotoDB_getMeta_result&);
  PhotoDB_getMeta_result() {
  }

  virtual ~PhotoDB_getMeta_result() throw();
   ::photodb::MetaValueResult success;

  _PhotoDB_getMeta_result__isset __isset;

  void __set_success(const  ::photodb::MetaValueResult& val);

  bool operator == (const PhotoDB_getMeta_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_getMeta_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_getMeta_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_getMeta_result& obj);
};

typedef struct _PhotoDB_getMeta_presult__isset {
  _PhotoDB_getMeta_presult__isset() : success(false) {}
  bool success :1;
} _PhotoDB_getMeta_presult__isset;

class PhotoDB_getMeta_presult {
 public:

  static const char* ascii_fingerprint; // = "504923E6FB2E58930D36738C9888DC60";
  static const uint8_t binary_fingerprint[16]; // = {0x50,0x49,0x23,0xE6,0xFB,0x2E,0x58,0x93,0x0D,0x36,0x73,0x8C,0x98,0x88,0xDC,0x60};


  virtual ~PhotoDB_getMeta_presult() throw();
   ::photodb::MetaValueResult* success;

  _PhotoDB_getMeta_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_getMeta_presult& obj);
};


class PhotoDB_getImg_args {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};

  PhotoDB_getImg_args(const PhotoDB_getImg_args&);
  PhotoDB_getImg_args& operator=(const PhotoDB_getImg_args&);
  PhotoDB_getImg_args() : key(0), width(0) {
  }

  virtual ~PhotoDB_getImg_args() throw();
   ::photodb::Key key;
  int32_t width;

  void __set_key(const  ::photodb::Key val);

  void __set_width(const int32_t val);

  bool operator == (const PhotoDB_getImg_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(width == rhs.width))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_getImg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_getImg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_getImg_args& obj);
};


class PhotoDB_getImg_pargs {
 public:

  static const char* ascii_fingerprint; // = "AFAFBCDB9822F9D1AA4E44188E720B47";
  static const uint8_t binary_fingerprint[16]; // = {0xAF,0xAF,0xBC,0xDB,0x98,0x22,0xF9,0xD1,0xAA,0x4E,0x44,0x18,0x8E,0x72,0x0B,0x47};


  virtual ~PhotoDB_getImg_pargs() throw();
  const  ::photodb::Key* key;
  const int32_t* width;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_getImg_pargs& obj);
};

typedef struct _PhotoDB_getImg_result__isset {
  _PhotoDB_getImg_result__isset() : success(false) {}
  bool success :1;
} _PhotoDB_getImg_result__isset;

class PhotoDB_getImg_result {
 public:

  static const char* ascii_fingerprint; // = "99642C3DAFE4E8153955E151195FC430";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x64,0x2C,0x3D,0xAF,0xE4,0xE8,0x15,0x39,0x55,0xE1,0x51,0x19,0x5F,0xC4,0x30};

  PhotoDB_getImg_result(const PhotoDB_getImg_result&);
  PhotoDB_getImg_result& operator=(const PhotoDB_getImg_result&);
  PhotoDB_getImg_result() {
  }

  virtual ~PhotoDB_getImg_result() throw();
   ::photodb::ImgValueResult success;

  _PhotoDB_getImg_result__isset __isset;

  void __set_success(const  ::photodb::ImgValueResult& val);

  bool operator == (const PhotoDB_getImg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_getImg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_getImg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_getImg_result& obj);
};

typedef struct _PhotoDB_getImg_presult__isset {
  _PhotoDB_getImg_presult__isset() : success(false) {}
  bool success :1;
} _PhotoDB_getImg_presult__isset;

class PhotoDB_getImg_presult {
 public:

  static const char* ascii_fingerprint; // = "99642C3DAFE4E8153955E151195FC430";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x64,0x2C,0x3D,0xAF,0xE4,0xE8,0x15,0x39,0x55,0xE1,0x51,0x19,0x5F,0xC4,0x30};


  virtual ~PhotoDB_getImg_presult() throw();
   ::photodb::ImgValueResult* success;

  _PhotoDB_getImg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_getImg_presult& obj);
};


class PhotoDB_putMeta_args {
 public:

  static const char* ascii_fingerprint; // = "972E55E98120972B33C07856BCEDA73D";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x2E,0x55,0xE9,0x81,0x20,0x97,0x2B,0x33,0xC0,0x78,0x56,0xBC,0xED,0xA7,0x3D};

  PhotoDB_putMeta_args(const PhotoDB_putMeta_args&);
  PhotoDB_putMeta_args& operator=(const PhotoDB_putMeta_args&);
  PhotoDB_putMeta_args() : key(0) {
  }

  virtual ~PhotoDB_putMeta_args() throw();
   ::photodb::Key key;
   ::photodb::MetaValue value;

  void __set_key(const  ::photodb::Key val);

  void __set_value(const  ::photodb::MetaValue& val);

  bool operator == (const PhotoDB_putMeta_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_putMeta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_putMeta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_putMeta_args& obj);
};


class PhotoDB_putMeta_pargs {
 public:

  static const char* ascii_fingerprint; // = "972E55E98120972B33C07856BCEDA73D";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x2E,0x55,0xE9,0x81,0x20,0x97,0x2B,0x33,0xC0,0x78,0x56,0xBC,0xED,0xA7,0x3D};


  virtual ~PhotoDB_putMeta_pargs() throw();
  const  ::photodb::Key* key;
  const  ::photodb::MetaValue* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_putMeta_pargs& obj);
};

typedef struct _PhotoDB_putMeta_result__isset {
  _PhotoDB_putMeta_result__isset() : success(false) {}
  bool success :1;
} _PhotoDB_putMeta_result__isset;

class PhotoDB_putMeta_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  PhotoDB_putMeta_result(const PhotoDB_putMeta_result&);
  PhotoDB_putMeta_result& operator=(const PhotoDB_putMeta_result&);
  PhotoDB_putMeta_result() : success(0) {
  }

  virtual ~PhotoDB_putMeta_result() throw();
  int64_t success;

  _PhotoDB_putMeta_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const PhotoDB_putMeta_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_putMeta_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_putMeta_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_putMeta_result& obj);
};

typedef struct _PhotoDB_putMeta_presult__isset {
  _PhotoDB_putMeta_presult__isset() : success(false) {}
  bool success :1;
} _PhotoDB_putMeta_presult__isset;

class PhotoDB_putMeta_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~PhotoDB_putMeta_presult() throw();
  int64_t* success;

  _PhotoDB_putMeta_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_putMeta_presult& obj);
};


class PhotoDB_putImg_args {
 public:

  static const char* ascii_fingerprint; // = "36EC7B204BED94AD1530A46071024609";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0xEC,0x7B,0x20,0x4B,0xED,0x94,0xAD,0x15,0x30,0xA4,0x60,0x71,0x02,0x46,0x09};

  PhotoDB_putImg_args(const PhotoDB_putImg_args&);
  PhotoDB_putImg_args& operator=(const PhotoDB_putImg_args&);
  PhotoDB_putImg_args() : key(0) {
  }

  virtual ~PhotoDB_putImg_args() throw();
   ::photodb::Key key;
   ::photodb::ImgValue value;

  void __set_key(const  ::photodb::Key val);

  void __set_value(const  ::photodb::ImgValue& val);

  bool operator == (const PhotoDB_putImg_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_putImg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_putImg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_putImg_args& obj);
};


class PhotoDB_putImg_pargs {
 public:

  static const char* ascii_fingerprint; // = "36EC7B204BED94AD1530A46071024609";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0xEC,0x7B,0x20,0x4B,0xED,0x94,0xAD,0x15,0x30,0xA4,0x60,0x71,0x02,0x46,0x09};


  virtual ~PhotoDB_putImg_pargs() throw();
  const  ::photodb::Key* key;
  const  ::photodb::ImgValue* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_putImg_pargs& obj);
};

typedef struct _PhotoDB_putImg_result__isset {
  _PhotoDB_putImg_result__isset() : success(false) {}
  bool success :1;
} _PhotoDB_putImg_result__isset;

class PhotoDB_putImg_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  PhotoDB_putImg_result(const PhotoDB_putImg_result&);
  PhotoDB_putImg_result& operator=(const PhotoDB_putImg_result&);
  PhotoDB_putImg_result() : success(0) {
  }

  virtual ~PhotoDB_putImg_result() throw();
  int64_t success;

  _PhotoDB_putImg_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const PhotoDB_putImg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_putImg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_putImg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_putImg_result& obj);
};

typedef struct _PhotoDB_putImg_presult__isset {
  _PhotoDB_putImg_presult__isset() : success(false) {}
  bool success :1;
} _PhotoDB_putImg_presult__isset;

class PhotoDB_putImg_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~PhotoDB_putImg_presult() throw();
  int64_t* success;

  _PhotoDB_putImg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_putImg_presult& obj);
};


class PhotoDB_exist_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  PhotoDB_exist_args(const PhotoDB_exist_args&);
  PhotoDB_exist_args& operator=(const PhotoDB_exist_args&);
  PhotoDB_exist_args() : key(0) {
  }

  virtual ~PhotoDB_exist_args() throw();
   ::photodb::Key key;

  void __set_key(const  ::photodb::Key val);

  bool operator == (const PhotoDB_exist_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_exist_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_exist_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_exist_args& obj);
};


class PhotoDB_exist_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~PhotoDB_exist_pargs() throw();
  const  ::photodb::Key* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_exist_pargs& obj);
};

typedef struct _PhotoDB_exist_result__isset {
  _PhotoDB_exist_result__isset() : success(false) {}
  bool success :1;
} _PhotoDB_exist_result__isset;

class PhotoDB_exist_result {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};

  PhotoDB_exist_result(const PhotoDB_exist_result&);
  PhotoDB_exist_result& operator=(const PhotoDB_exist_result&);
  PhotoDB_exist_result() : success(0) {
  }

  virtual ~PhotoDB_exist_result() throw();
  int32_t success;

  _PhotoDB_exist_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const PhotoDB_exist_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_exist_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_exist_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_exist_result& obj);
};

typedef struct _PhotoDB_exist_presult__isset {
  _PhotoDB_exist_presult__isset() : success(false) {}
  bool success :1;
} _PhotoDB_exist_presult__isset;

class PhotoDB_exist_presult {
 public:

  static const char* ascii_fingerprint; // = "32183C4A04E706C58ED2F62566DDD8DE";
  static const uint8_t binary_fingerprint[16]; // = {0x32,0x18,0x3C,0x4A,0x04,0xE7,0x06,0xC5,0x8E,0xD2,0xF6,0x25,0x66,0xDD,0xD8,0xDE};


  virtual ~PhotoDB_exist_presult() throw();
  int32_t* success;

  _PhotoDB_exist_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_exist_presult& obj);
};


class PhotoDB_remove_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  PhotoDB_remove_args(const PhotoDB_remove_args&);
  PhotoDB_remove_args& operator=(const PhotoDB_remove_args&);
  PhotoDB_remove_args() : key(0) {
  }

  virtual ~PhotoDB_remove_args() throw();
   ::photodb::Key key;

  void __set_key(const  ::photodb::Key val);

  bool operator == (const PhotoDB_remove_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_remove_args& obj);
};


class PhotoDB_remove_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~PhotoDB_remove_pargs() throw();
  const  ::photodb::Key* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_remove_pargs& obj);
};

typedef struct _PhotoDB_remove_result__isset {
  _PhotoDB_remove_result__isset() : success(false) {}
  bool success :1;
} _PhotoDB_remove_result__isset;

class PhotoDB_remove_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  PhotoDB_remove_result(const PhotoDB_remove_result&);
  PhotoDB_remove_result& operator=(const PhotoDB_remove_result&);
  PhotoDB_remove_result() : success(0) {
  }

  virtual ~PhotoDB_remove_result() throw();
  int64_t success;

  _PhotoDB_remove_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const PhotoDB_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_remove_result& obj);
};

typedef struct _PhotoDB_remove_presult__isset {
  _PhotoDB_remove_presult__isset() : success(false) {}
  bool success :1;
} _PhotoDB_remove_presult__isset;

class PhotoDB_remove_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~PhotoDB_remove_presult() throw();
  int64_t* success;

  _PhotoDB_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_remove_presult& obj);
};


class PhotoDB_ow_putMeta_args {
 public:

  static const char* ascii_fingerprint; // = "972E55E98120972B33C07856BCEDA73D";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x2E,0x55,0xE9,0x81,0x20,0x97,0x2B,0x33,0xC0,0x78,0x56,0xBC,0xED,0xA7,0x3D};

  PhotoDB_ow_putMeta_args(const PhotoDB_ow_putMeta_args&);
  PhotoDB_ow_putMeta_args& operator=(const PhotoDB_ow_putMeta_args&);
  PhotoDB_ow_putMeta_args() : key(0) {
  }

  virtual ~PhotoDB_ow_putMeta_args() throw();
   ::photodb::Key key;
   ::photodb::MetaValue value;

  void __set_key(const  ::photodb::Key val);

  void __set_value(const  ::photodb::MetaValue& val);

  bool operator == (const PhotoDB_ow_putMeta_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_ow_putMeta_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_ow_putMeta_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_ow_putMeta_args& obj);
};


class PhotoDB_ow_putMeta_pargs {
 public:

  static const char* ascii_fingerprint; // = "972E55E98120972B33C07856BCEDA73D";
  static const uint8_t binary_fingerprint[16]; // = {0x97,0x2E,0x55,0xE9,0x81,0x20,0x97,0x2B,0x33,0xC0,0x78,0x56,0xBC,0xED,0xA7,0x3D};


  virtual ~PhotoDB_ow_putMeta_pargs() throw();
  const  ::photodb::Key* key;
  const  ::photodb::MetaValue* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_ow_putMeta_pargs& obj);
};


class PhotoDB_ow_putImg_args {
 public:

  static const char* ascii_fingerprint; // = "36EC7B204BED94AD1530A46071024609";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0xEC,0x7B,0x20,0x4B,0xED,0x94,0xAD,0x15,0x30,0xA4,0x60,0x71,0x02,0x46,0x09};

  PhotoDB_ow_putImg_args(const PhotoDB_ow_putImg_args&);
  PhotoDB_ow_putImg_args& operator=(const PhotoDB_ow_putImg_args&);
  PhotoDB_ow_putImg_args() : key(0) {
  }

  virtual ~PhotoDB_ow_putImg_args() throw();
   ::photodb::Key key;
   ::photodb::ImgValue value;

  void __set_key(const  ::photodb::Key val);

  void __set_value(const  ::photodb::ImgValue& val);

  bool operator == (const PhotoDB_ow_putImg_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_ow_putImg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_ow_putImg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_ow_putImg_args& obj);
};


class PhotoDB_ow_putImg_pargs {
 public:

  static const char* ascii_fingerprint; // = "36EC7B204BED94AD1530A46071024609";
  static const uint8_t binary_fingerprint[16]; // = {0x36,0xEC,0x7B,0x20,0x4B,0xED,0x94,0xAD,0x15,0x30,0xA4,0x60,0x71,0x02,0x46,0x09};


  virtual ~PhotoDB_ow_putImg_pargs() throw();
  const  ::photodb::Key* key;
  const  ::photodb::ImgValue* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_ow_putImg_pargs& obj);
};


class PhotoDB_ow_remove_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  PhotoDB_ow_remove_args(const PhotoDB_ow_remove_args&);
  PhotoDB_ow_remove_args& operator=(const PhotoDB_ow_remove_args&);
  PhotoDB_ow_remove_args() : key(0) {
  }

  virtual ~PhotoDB_ow_remove_args() throw();
   ::photodb::Key key;

  void __set_key(const  ::photodb::Key val);

  bool operator == (const PhotoDB_ow_remove_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const PhotoDB_ow_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const PhotoDB_ow_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_ow_remove_args& obj);
};


class PhotoDB_ow_remove_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~PhotoDB_ow_remove_pargs() throw();
  const  ::photodb::Key* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const PhotoDB_ow_remove_pargs& obj);
};

class PhotoDBClient : virtual public PhotoDBIf {
 public:
  PhotoDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  PhotoDBClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ping();
  void send_ping();
  int32_t recv_ping();
  void getMeta( ::photodb::MetaValueResult& _return, const  ::photodb::Key key);
  void send_getMeta(const  ::photodb::Key key);
  void recv_getMeta( ::photodb::MetaValueResult& _return);
  void getImg( ::photodb::ImgValueResult& _return, const  ::photodb::Key key, const int32_t width);
  void send_getImg(const  ::photodb::Key key, const int32_t width);
  void recv_getImg( ::photodb::ImgValueResult& _return);
  int64_t putMeta(const  ::photodb::Key key, const  ::photodb::MetaValue& value);
  void send_putMeta(const  ::photodb::Key key, const  ::photodb::MetaValue& value);
  int64_t recv_putMeta();
  int64_t putImg(const  ::photodb::Key key, const  ::photodb::ImgValue& value);
  void send_putImg(const  ::photodb::Key key, const  ::photodb::ImgValue& value);
  int64_t recv_putImg();
  int32_t exist(const  ::photodb::Key key);
  void send_exist(const  ::photodb::Key key);
  int32_t recv_exist();
  int64_t remove(const  ::photodb::Key key);
  void send_remove(const  ::photodb::Key key);
  int64_t recv_remove();
  void ow_putMeta(const  ::photodb::Key key, const  ::photodb::MetaValue& value);
  void send_ow_putMeta(const  ::photodb::Key key, const  ::photodb::MetaValue& value);
  void ow_putImg(const  ::photodb::Key key, const  ::photodb::ImgValue& value);
  void send_ow_putImg(const  ::photodb::Key key, const  ::photodb::ImgValue& value);
  void ow_remove(const  ::photodb::Key key);
  void send_ow_remove(const  ::photodb::Key key);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class PhotoDBProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<PhotoDBIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (PhotoDBProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMeta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getImg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putMeta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_putImg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exist(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ow_putMeta(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ow_putImg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ow_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  PhotoDBProcessor(boost::shared_ptr<PhotoDBIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &PhotoDBProcessor::process_ping;
    processMap_["getMeta"] = &PhotoDBProcessor::process_getMeta;
    processMap_["getImg"] = &PhotoDBProcessor::process_getImg;
    processMap_["putMeta"] = &PhotoDBProcessor::process_putMeta;
    processMap_["putImg"] = &PhotoDBProcessor::process_putImg;
    processMap_["exist"] = &PhotoDBProcessor::process_exist;
    processMap_["remove"] = &PhotoDBProcessor::process_remove;
    processMap_["ow_putMeta"] = &PhotoDBProcessor::process_ow_putMeta;
    processMap_["ow_putImg"] = &PhotoDBProcessor::process_ow_putImg;
    processMap_["ow_remove"] = &PhotoDBProcessor::process_ow_remove;
  }

  virtual ~PhotoDBProcessor() {}
};

class PhotoDBProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  PhotoDBProcessorFactory(const ::boost::shared_ptr< PhotoDBIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< PhotoDBIfFactory > handlerFactory_;
};

class PhotoDBMultiface : virtual public PhotoDBIf {
 public:
  PhotoDBMultiface(std::vector<boost::shared_ptr<PhotoDBIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~PhotoDBMultiface() {}
 protected:
  std::vector<boost::shared_ptr<PhotoDBIf> > ifaces_;
  PhotoDBMultiface() {}
  void add(boost::shared_ptr<PhotoDBIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void getMeta( ::photodb::MetaValueResult& _return, const  ::photodb::Key key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMeta(_return, key);
    }
    ifaces_[i]->getMeta(_return, key);
    return;
  }

  void getImg( ::photodb::ImgValueResult& _return, const  ::photodb::Key key, const int32_t width) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getImg(_return, key, width);
    }
    ifaces_[i]->getImg(_return, key, width);
    return;
  }

  int64_t putMeta(const  ::photodb::Key key, const  ::photodb::MetaValue& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putMeta(key, value);
    }
    return ifaces_[i]->putMeta(key, value);
  }

  int64_t putImg(const  ::photodb::Key key, const  ::photodb::ImgValue& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putImg(key, value);
    }
    return ifaces_[i]->putImg(key, value);
  }

  int32_t exist(const  ::photodb::Key key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exist(key);
    }
    return ifaces_[i]->exist(key);
  }

  int64_t remove(const  ::photodb::Key key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(key);
    }
    return ifaces_[i]->remove(key);
  }

  void ow_putMeta(const  ::photodb::Key key, const  ::photodb::MetaValue& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ow_putMeta(key, value);
    }
    ifaces_[i]->ow_putMeta(key, value);
  }

  void ow_putImg(const  ::photodb::Key key, const  ::photodb::ImgValue& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ow_putImg(key, value);
    }
    ifaces_[i]->ow_putImg(key, value);
  }

  void ow_remove(const  ::photodb::Key key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ow_remove(key);
    }
    ifaces_[i]->ow_remove(key);
  }

};

} // namespace

#endif
