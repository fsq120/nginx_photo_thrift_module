/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef type_TYPES_H
#define type_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace photodb {

typedef int64_t Key;

typedef std::vector<Key>  ListKey;

typedef int16_t FieldId;

typedef std::vector<FieldId>  ListField;

class MetaValue;

class ImgValue;

class MetaValueResult;

class ImgValueResult;

typedef struct _MetaValue__isset {
  _MetaValue__isset() : key(false), contentType(false), ext(false), createdTime(false), updatedTime(false), etag(false), width(false), height(false) {}
  bool key :1;
  bool contentType :1;
  bool ext :1;
  bool createdTime :1;
  bool updatedTime :1;
  bool etag :1;
  bool width :1;
  bool height :1;
} _MetaValue__isset;

class MetaValue {
 public:

  static const char* ascii_fingerprint; // = "C3B294C1DC05A03EEF52B6404AD1B714";
  static const uint8_t binary_fingerprint[16]; // = {0xC3,0xB2,0x94,0xC1,0xDC,0x05,0xA0,0x3E,0xEF,0x52,0xB6,0x40,0x4A,0xD1,0xB7,0x14};

  MetaValue(const MetaValue&);
  MetaValue& operator=(const MetaValue&);
  MetaValue() : key(0), contentType(), ext(), createdTime(0), updatedTime(0), etag(), width(0), height(0) {
  }

  virtual ~MetaValue() throw();
  int64_t key;
  std::string contentType;
  std::string ext;
  int64_t createdTime;
  int64_t updatedTime;
  std::string etag;
  int32_t width;
  int32_t height;

  _MetaValue__isset __isset;

  void __set_key(const int64_t val);

  void __set_contentType(const std::string& val);

  void __set_ext(const std::string& val);

  void __set_createdTime(const int64_t val);

  void __set_updatedTime(const int64_t val);

  void __set_etag(const std::string& val);

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  bool operator == (const MetaValue & rhs) const
  {
    if (__isset.key != rhs.__isset.key)
      return false;
    else if (__isset.key && !(key == rhs.key))
      return false;
    if (__isset.contentType != rhs.__isset.contentType)
      return false;
    else if (__isset.contentType && !(contentType == rhs.contentType))
      return false;
    if (__isset.ext != rhs.__isset.ext)
      return false;
    else if (__isset.ext && !(ext == rhs.ext))
      return false;
    if (__isset.createdTime != rhs.__isset.createdTime)
      return false;
    else if (__isset.createdTime && !(createdTime == rhs.createdTime))
      return false;
    if (__isset.updatedTime != rhs.__isset.updatedTime)
      return false;
    else if (__isset.updatedTime && !(updatedTime == rhs.updatedTime))
      return false;
    if (__isset.etag != rhs.__isset.etag)
      return false;
    else if (__isset.etag && !(etag == rhs.etag))
      return false;
    if (__isset.width != rhs.__isset.width)
      return false;
    else if (__isset.width && !(width == rhs.width))
      return false;
    if (__isset.height != rhs.__isset.height)
      return false;
    else if (__isset.height && !(height == rhs.height))
      return false;
    return true;
  }
  bool operator != (const MetaValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetaValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MetaValue& obj);
};

void swap(MetaValue &a, MetaValue &b);

typedef struct _ImgValue__isset {
  _ImgValue__isset() : img(false) {}
  bool img :1;
} _ImgValue__isset;

class ImgValue {
 public:

  static const char* ascii_fingerprint; // = "66E694018C17E5B65A59AE8F55CCA3CD";
  static const uint8_t binary_fingerprint[16]; // = {0x66,0xE6,0x94,0x01,0x8C,0x17,0xE5,0xB6,0x5A,0x59,0xAE,0x8F,0x55,0xCC,0xA3,0xCD};

  ImgValue(const ImgValue&);
  ImgValue& operator=(const ImgValue&);
  ImgValue() : img() {
  }

  virtual ~ImgValue() throw();
  std::string img;

  _ImgValue__isset __isset;

  void __set_img(const std::string& val);

  bool operator == (const ImgValue & rhs) const
  {
    if (__isset.img != rhs.__isset.img)
      return false;
    else if (__isset.img && !(img == rhs.img))
      return false;
    return true;
  }
  bool operator != (const ImgValue &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImgValue & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ImgValue& obj);
};

void swap(ImgValue &a, ImgValue &b);

typedef struct _MetaValueResult__isset {
  _MetaValueResult__isset() : value(false) {}
  bool value :1;
} _MetaValueResult__isset;

class MetaValueResult {
 public:

  static const char* ascii_fingerprint; // = "AB41CDE81BD9D24511C9C3B87D42D4AA";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x41,0xCD,0xE8,0x1B,0xD9,0xD2,0x45,0x11,0xC9,0xC3,0xB8,0x7D,0x42,0xD4,0xAA};

  MetaValueResult(const MetaValueResult&);
  MetaValueResult& operator=(const MetaValueResult&);
  MetaValueResult() : error(0) {
  }

  virtual ~MetaValueResult() throw();
  int32_t error;
  MetaValue value;

  _MetaValueResult__isset __isset;

  void __set_error(const int32_t val);

  void __set_value(const MetaValue& val);

  bool operator == (const MetaValueResult & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const MetaValueResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetaValueResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const MetaValueResult& obj);
};

void swap(MetaValueResult &a, MetaValueResult &b);

typedef struct _ImgValueResult__isset {
  _ImgValueResult__isset() : value(false) {}
  bool value :1;
} _ImgValueResult__isset;

class ImgValueResult {
 public:

  static const char* ascii_fingerprint; // = "87F881FE7A41D5968AF5DB3937962BA8";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0xF8,0x81,0xFE,0x7A,0x41,0xD5,0x96,0x8A,0xF5,0xDB,0x39,0x37,0x96,0x2B,0xA8};

  ImgValueResult(const ImgValueResult&);
  ImgValueResult& operator=(const ImgValueResult&);
  ImgValueResult() : error(0) {
  }

  virtual ~ImgValueResult() throw();
  int32_t error;
  ImgValue value;

  _ImgValueResult__isset __isset;

  void __set_error(const int32_t val);

  void __set_value(const ImgValue& val);

  bool operator == (const ImgValueResult & rhs) const
  {
    if (!(error == rhs.error))
      return false;
    if (__isset.value != rhs.__isset.value)
      return false;
    else if (__isset.value && !(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const ImgValueResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImgValueResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ImgValueResult& obj);
};

void swap(ImgValueResult &a, ImgValueResult &b);

} // namespace

#endif
